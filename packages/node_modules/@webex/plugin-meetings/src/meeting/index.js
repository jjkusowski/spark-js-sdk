import uuid from 'uuid';
import {StatelessSparkPlugin} from '@ciscospark/spark-core';

import Roap from '../roap/index';
import Media from '../media';
import MeetingStateMachine from '../meeting/state';
import AudioStateMachine from '../meeting/audio';
import VideoStateMachine from '../meeting/video';
import PeerConnectionManager from '../peer-connection-manager';
import MeetingRequest from '../meeting/request';
import MeetingUtil from '../meeting/util';
import WebRTCStats from '../stats/index';
import {MEETINGS, EVENT_TRIGGERS, EVENT_TYPES} from '../constants';

/**
 * @export
 * @class Meeting
 */
export default class Meeting extends StatelessSparkPlugin {
  namespace = MEETINGS;

  /**
   * Create an instance of Meeting
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  constructor(attrs, options) {
    super({}, options);
    this.attrs = attrs;
    this.options = options;
    this.id = uuid.v4();
    this.userId = attrs.userId;
    this.resource = attrs.resource;
    this.deviceUrl = attrs.deviceUrl;
    this.roapSeq = 0;
    this.meetingInfo = attrs.meetingInfo || {};
    this.meetingRequest = new MeetingRequest({}, options);
    this.roap = new Roap({}, options);
    this.audio = null;
    this.video = null;
    this.state = MeetingStateMachine.create(this);
    this.stats = null;
    this.convoId = null;
    this.locusUrl = null;
    this.sipUri = null;
  }

  /**
   * Reference to the stats builder object
   * @param {Object} options - optional {media: {}, screen: {}} see stats/index
   * @returns {MeetingStats}
   */
  getStats(options) {
    if (!this.stats) {
      return this.createStats(options);
    }
    return this.stats;
  }

  /**
   * Overwrite the stats builder object
   * @param {Object} options - optional {media: {}, screen: {}} see stats/index
   * @returns {MeetingStats}
   */
  createStats(options) {
    this.stats = new WebRTCStats(this.attrs, this.options, options);
    return this.stats;
  }

  /**
   * Convenience function to tell whether a meeting is muted
   * @returns {Boolean} if meeting audio muted or not
   */
  isAudioMuted() {
    return this.audio.isMuted();
  }

  /**
   * Convenience function to tell if the end user last changed the audio state
   * @returns {Boolean} if audio was manipulated by the end user
   */
  isAudioSelf() {
    return this.audio.isSelf();
  }

  /**
   * Convenience function to tell whether video is muted
   * @returns {Boolean} if meeting video is muted or not
   */
  isVideoMuted() {
    return this.video.isMuted();
  }

  /**
   * Convenience function to tell whether the end user changed the video state
   * @returns {Boolean} if meeting video is muted or not
   */
  isVideoSelf() {
    return this.video.isSelf();
  }

  /**
   * Sets the meeting info on the class instance
   * @param {Object} meetingInfo
   * @returns {null}
   */
  setMeetingInfo(meetingInfo) {
    // MeetingInfo will be undefined for 1:1 calls
    if (meetingInfo) {
      this.convoId = this.meetingInfo.convoId || this.convoId;
      this.locusUrl = this.meetingInfo.locusUrl || this.locusUrl;
      this.sipUri = this.meetingInfo.sipMeetingUri || this.sipUri;
    }
  }

  /**
   * Sets the sip uri on the class instance
   * uses meeting info as precedence
   * @param {String} sipUri
   * @returns {null}
   */
  setSipUri(sipUri) {
    if (this.meetingInfo
      && !(this.meetingInfo.errors && this.meetingInfo.errors.length > 0)) {
      this.setMeetingInfo(this.meetingInfo);
    }
    else if (!this.sipUri) {
      this.sipUri = sipUri;
    }
  }

  /**
   * Set the roap seq on the class instance
   * @param {Number} seq
   * @returns {null}
   */
  setRoapSeq(seq) {
    if (seq) {
      this.roapSeq = seq;
    }
  }

  /**
   * Set the locus info the class instance
   * @param {Object} locus
   * @returns {null}
   */
  setLocusJoin(locus) {
    this.locus = locus.locus;
    this.mediaConnections = locus.mediaConnections;
    this.locusUrl = locus.locusUrl;
    this.locusId = locus.locusId;
    this.selfId = locus.selfId;
    this.mediaId = locus.mediaId;
  }

  /**
   * Sets the remote stream on the class instance and emits and
   * event do developers
   * @param {Object} pc The remote stream peer connection
   * @returns {null}
   */
  setRemoteStream(pc) {
    if (!pc) {
      return;
    }
    // eslint-disable-next-line no-param-reassign
    pc.ontrack = (event) => {
      [this.remoteStream] = event.streams;

      // eslint-disable-next-line no-warning-comments
      // TODO: It's possible for media to not be present
      // so we might need to either
      // A) wait until we have media flowing
      // B) trigger a second event when video is flowing
      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.REMOTE,
        stream: this.remoteStream
      });
    };
  }

  /**
   * Removes the remote stream on the class instance and triggers an event
   * to developers
   * @returns {null}
   */
  unsetRemoteStream() {
    this.remoteStream = null;
  }

  /**
   * Removes the remote stream on the class instance and triggers an event
   * to developers
   * @returns {null}
   */
  closeRemoteStream() {
    return Media.stopStream(this.remoteStream).then(() => {
      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {
        type: EVENT_TYPES.REMOTE
      });
    });
  }

  /**
   * Sets the sceen stream on the class instance and triggers and event to developers
   * @param {Object} pc a peer connection instance for the screen
   * @returns {null}
   */
  setShareStream(pc) {
    // eslint-disable-next-line no-param-reassign
    pc.ontrack = (event) => {
      [this.remoteShare] = event.streams;

      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.REMOTE_SHARE,
        stream: this.remoteShare
      });
    };
  }

  /**
   * Sets the local media stream on the class and emits an event to the developer
   * @param {Steam} localStream the local media stream
   * @returns {null}
   */
  setLocalStream(localStream) {
    if (localStream) {
      this.localStream = localStream;

      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.LOCAL,
        stream: this.localStream
      });
    }
  }

  /**
 * Sets the local media stream on the class and emits an event to the developer
 * @param {Steam} localShare the local media stream
 * @returns {null}
 */
  setLocalShare(localShare) {
    if (localShare) {
      this.localShare = localShare;

      this.trigger(EVENT_TRIGGERS.MEDIA_READY, {
        type: EVENT_TYPES.LOCAL_SHARE,
        stream: this.localShare
      });
    }
  }

  /**
   * Closes the local stream from the class and emits an event to the developer
   * @returns {null}
   */
  closeLocalStream() {
    return Media.stopStream(this.localStream).then(() => {
      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {
        type: EVENT_TYPES.LOCAL
      });
    });
  }

  /**
 * Closes the local stream from the class and emits an event to the developer
 * @returns {null}
 */
  closeLocalShare() {
    return Media.stopStream(this.localShare).then(() => {
      this.trigger(EVENT_TRIGGERS.MEDIA_STOPPED, {
        type: EVENT_TYPES.LOCAL_SHARE
      });
    });
  }

  /**
   * Removes the local stream from the class and emits an event to the developer
   * @returns {null}
   */
  unsetLocalStream() {
    this.localStream = null;
  }

  /**
  * Removes the local share from the class and emits an event to the developer
  * @returns {null}
  */
  unsetLocalShare() {
    this.localShare = null;
  }

  /**
   * Sets the peer connections on the class
   * @param {PeerConnection} mediaPeerConnection
   * @param {PeerConnection} sharePeerConnection
   * @returns {null}
   */
  setPeerConnections(mediaPeerConnection, sharePeerConnection) {
    this.mediaPeerConnection = mediaPeerConnection;
    this.sharePeerConnection = sharePeerConnection;
  }

  /**
   * Close the peer connections and remove them from the class. Triggers an event
   * when each is closed.
   * @returns {Promise} returns a resolved promise with an array of closed peer connections
   */
  closePeerConnections() {
    return Promise.all([
      PeerConnectionManager.close(this.mediaPeerConnection),
      PeerConnectionManager.close(this.sharePeerConnection)
    ]);
  }

  /**
   * Unsets the peer connections on the class
   * @param {PeerConnection} mediaPeerConnection
   * @param {PeerConnection} sharePeerConnection
   * @returns {null}
   */
  unsetPeerConnections() {
    this.mediaPeerConnection = null;
    this.sharePeerConnection = null;
  }

  /**
   * Convenience method to set the correlation id for the Meeting
   * @param {String} id correlation id to set on the class
   * @returns {null}
   */
  setCorrelationId(id) {
    this.correlationId = id;
  }

  /**
   * Mute the audio for a meeting
   * @returns {Promise} resolves the data from muting audio {mute, self}
   * @returns {Error} an error if there is no audio state machine
   */
  muteAudio() {
    if (!this.audio || (this.audio && !this.audio.toggle)) {
      return Promise.reject(new Error('no audio control associated to the meeting'));
    }

    return this.audio.toggle({
      mute: true,
      self: true
    });
  }

  /**
   * Unmute meeting audio
   * @returns {Promise} resolves data from muting audio {mute, self}
   * @returns {Error} an error if there is no audio state machine
   */
  unmuteAudio() {
    if (!this.audio || (this.audio && !this.audio.toggle)) {
      return Promise.reject(new Error('no audio control associated to the meeting'));
    }
    return this.audio.toggle({
      mute: false,
      self: true
    });
  }

  /**
   * Mute the video for a meeting
   * @returns {Promise} resolves data from muting video {mute, self}
   * @returns {Error} an error if there is no video state machine
   */
  muteVideo() {
    if (!this.video || (this.video && !this.video.toggle)) {
      return Promise.reject(new Error('no video control associated to the meeting'));
    }
    return this.video.toggle({
      mute: true,
      self: true
    });
  }

  /**
   * Unmute meeting video
   * @returns {Promise} resolves data from muting video {mute, self}
   * @returns {Error} an error if there is no video state machine
   */
  unmuteVideo() {
    if (!this.video || (this.video && !this.video.toggle)) {
      return Promise.reject(new Error('no audio control associated to the meeting'));
    }
    const options = {};
    options.mute = false;
    options.self = true;
    return this.video.toggle({
      mute: false,
      self: true
    });
  }

  /**
   *
   * Specify joining via audio (option: pstn), video, screenshare
   * @exports
   * @param {object} options A configurable options object for joining a meeting
   * @param {Object } options.mediaSettings overrides for the default media direction
   * @returns {Promise}
   * @memberof Meeting
   */
  join(options = {}) {
    // eslint-disable-next-line no-warning-comments
    // TODO wire into default config. There's currently an issue with the stateless plugin or how we register
    const mediaDirection = Object.assign(this.config.mediaSettings, options.mediaSettings);

    // TODO: change to a good place

    this.resourceId = options.resourceId;
    this.audio = AudioStateMachine.create(mediaDirection, this);
    this.video = VideoStateMachine.create(mediaDirection, this);
    this.setCorrelationId(this.id);
    this.state.join();
    return MeetingUtil.joinMeeting(this)
      .then((response) => {
        this.setLocusJoin(response);
        this.state.local();
        // TODO :This can be done in a better way but have to wait for both
        // mediaStreams to be created
        return Media.getLocalMedia({
          sendAudio: mediaDirection.sendAudio,
          sendVideo: mediaDirection.sendVideo
        }).then((localStream) => Media.getLocalMedia({
          sendShare: mediaDirection.sendShare // TODO: check share streams if true
        }).then((shareStream) => [localStream, shareStream]));
      })
      .catch((err) => {
        this.logger.log('Meeting:index#join --> Error joining the call on getLocalMedia, ', err);
        throw err;
      })
      .then(([localStream, localShare]) => {
        this.state.connect();
        this.setLocalStream(localStream);
        this.setLocalShare(localShare);
        return Media.attachMedia(mediaDirection, PeerConnectionManager, localStream, localShare);
      })
      .catch((err) => {
        this.logger.log('Meeting:index#join --> Error joining the call on addMedia, ', err);
        throw err;
      }) // TODO: This wont come in sequence
      .then(([mediaPeerConnection, sharePeerConnection]) => {
        const updatedsharePeerConnection = PeerConnectionManager.setContentSlides(sharePeerConnection);

        this.setPeerConnections(mediaPeerConnection, updatedsharePeerConnection);
        this.setRemoteStream(this.mediaPeerConnection);
        this.setShareStream(this.sharePeerConnection);
        return this.roap.start();
      })
      .catch((err) => {
        this.logger.log('Meeting:index#join --> Error joining the call on roap initialization, ', err);
        throw err;
      })
      .then(() =>
        this.roap
          .sendRoapMediaRequest({
            sdps: MeetingUtil.getSdps(this),
            roapSeq: this.roapSeq,
            meeting: this // or can pass meeting ID
          })
          .catch((err) => {
            this.logger.error('Meeting:index#join --> Error joining the call on send roap media request, ', err);
            throw err;
          }))
      .then(() => {
        this.state.establish();
      });
  }

  /**
   *
   * Leave the current meeting
   * @param {Object} options An object of options
   * @param {Boolean} options.keepLocalMedia Whether to tear down the local media connections or not.
   * @returns {Promise}
   * @memberof Meeting
   */
  leave() {
    this.state.leave();
    return this.meetingRequest
      .leaveMeeting({
        locusUrl: this.locusUrl,
        selfId: this.selfId,
        correlationId: this.correlationId,
        resourceId: null,
        deviceUrl: this.deviceUrl
      })
      .then(() => this.closeLocalStream())
      .then(() => this.closeLocalShare())
      .then(() => this.closePeerConnections())
      .then(() => {
        this.unsetLocalStream();
        this.unsetLocalShare();
        this.unsetRemoteStream();
        this.unsetPeerConnections();
      })
      .then(() => {
        this.roap.stop(this.correlationId, this.roapSeq);
      })
      .then(() => {
        this.state.end();
      })
      .catch((err) => {
        this.state.error();
        this.logger.error(`An error occured while trying to leave meeting with an id of ${this.id}`, err);
      })
      .finally(() => {
        this.state.clean();
      });
  }

  // /**
  //  *
  //  * Move this meeting to a given device
  //  * only possible if you are paired with the given device
  //  * @param {string} deviceID
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // moveToDevice(deviceID) {
  //   return new Promise((resolve) => resolve(deviceID));
  // }

  // /**
  //  *
  //  * Move this meeting back to the current client device, e.g., personal laptop.
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // moveToClient() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Update the audio options of this meeting
  //  * @param {string} status
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // updateAudio(status) {
  //   return new Promise((resolve) => resolve(status));
  // }

  // /**
  //  *
  //  * Update the video option of this meeting
  //  * @param {string} status
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // updateVideo(status) {
  //   return new Promise((resolve) => resolve(status));
  // }

  // /**
  //  *
  //  * Update screen sharing preference of this meeting
  //  * @param {string} shareType
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // updateShare(shareType) {
  //   return new Promise((resolve) => resolve(shareType));
  // }

  /**
   *
   * Alias of updateShare
   * @param {*} args
   * @returns {updateShare}
   * @memberof Meeting
   */
  share() {
    const content = this.locus.mediaShares.find((element) => element.name === 'content');
    this.meetingRequest.changeMeetingFloor({
      disposition: 'GRANTED', // : 'RELEASED';
      personUrl: this.locus.self.url,
      deviceUrl: this.deviceUrl,
      uri: content.url,
      resourceUrl: this.resourceUrl
    });
  }

  // /**
  //  *
  //  * Decline this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // decline() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Send this meeting to the phone system
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // sendDtmf() {
  //   return new Promise((resolve) => resolve({}));
  // }
  // /**
  //  *
  //  * Get statistics of the current meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // getStats() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Lock this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // lock() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Unlock this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // unlock() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * Intiate a recording of this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // startRecording() {
  //   return new Promise((resolve) => resolve({}));
  // }

  // /**
  //  *
  //  * End the recording of this meeting
  //  * @returns {Promise}
  //  * @memberof Meeting
  //  */
  // stopRecording() {
  //   return new Promise((resolve) => resolve({}));
  // }
}
