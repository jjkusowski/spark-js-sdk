/** *****
 *
 *
 *  Hey there. Glad you found your way here. Please be sure to alphabetize your constants.
 *
 *
 ****** */

export const AUDIO = 'audio';
export const AUDIO_BANDWIDTH_LIMIT = '64000';
export const AUDIOINPUT = 'audioinput';
export const ALTERNATE_REDIRECT_TRUE = 'alternateRedirect=true';
export const ANSWER = 'ANSWER';

export const CALL = 'call';
export const CONFLICT = 'CONFLICT';
export const CONVERSATION_URL = 'CONVERSATION_URL';
export const CONVERSATIONS = 'conversations';
export const CALENDAR = 'calendar';
export const CALENDAR_EVENTS_API = 'calendarEvents';

export const DEVELOPMENT = 'development';

export const ERROR = 'ERROR';

export const GET = 'GET';

export const IDLE = 'IDLE';
export const ICE_TIMEOUT = 1000;

export const LEAVE = 'leave';
export const LOCAL = 'local';
export const LOCI = 'loci';
export const LOCUS = 'locus';
export const LOCUS_ID = 'LOCUS_ID';

export const MEETING_LINK = 'MEETING_LINK';
export const MEETINGS = 'Meetings';
export const MEETING_ID = 'MEETING_ID';
export const MEETINGINFO = 'meetingInfo';
export const MEDIA_SIP_URI = 'MEDIA_SIP_URI';
export const MEDIA = 'media';

export const ONE_ON_ONE = 'ONE_ON_ONE';
export const OFFER = 'OFFER';

export const PARTICIPANT = 'participant';
export const PERSONAL_ROOM = 'PERSONAL_ROOM';
export const PUT = 'PUT';
export const POST = 'POST';

export const RETRY_TIMEOUT = 3000;
export const REMOTE = 'remote';
export const REQUESTED = 'REQUESTED';
export const _ANSWER_ = 'answer';
export const _ERROR_ = 'error';
export const _DATA_ = 'data';
export const _CLOSED_ = 'closed';
export const RTC_CONFIGURATION_FIREFOX = {iceServers: [], bundlePolicy: 'max-compat'};
export const RTC_CONFIGURATION = {iceServers: []};

export const SIP_URI = 'SIP_URI';

export const TEMP_SIP_URI = 'TEMP_SIP_URI';
export const TYPE = 'type';

export const USE_URI_LOOKUP_FALSE = 'useUriLookup=false';

export const VIDEO = 'video';
export const VIDEO_BANDWIDTH_LIMIT = '4000000';
export const VIDEOINPUT = 'videoinput';

export const WEBEX_DOT_COM = 'webex.com';

export const CALENDAR_EVENTS = {
  CREATE: 'event:calendar.meeting.create',
  UPDATE: 'event:calendar.meeting.update',
  CREATE_MINIMAL: 'event:calendar.meeting.create.minimal',
  UPDATE_MINIMAL: 'event:calendar.meeting.update.minimal',
  DELETE: 'event:calendar.meeting.delete'
};

export const MEETING_STATE_MACHINE = {
  TRANSITIONS: {
    ERROR: 'error',
    START: 'start',
    JOIN: 'join',
    LOCAL: 'local',
    CONNECT: 'connect',
    ESTABLISH: 'establish',
    LEAVE: 'leave',
    END: 'end',
    CLEAN: 'clean'
  },
  STATES: {
    IDLE: 'IDLE',
    INCOMING: 'INCOMING',
    DIALING: 'DIALING',
    ON_GOING: 'ON_GOING',
    CONNECTING_MEDIA_LOCAL: 'CONNECTING_MEDIA_LOCAL',
    CONNECTING_MEDIA_REMOTE: 'CONNECTING_MEDIA_REMOTE',
    ESTABLISHED_MEDIA: 'ESTABLISHED_MEDIA',
    TERMINATING: 'TERMINATING',
    ENDED: 'ENDED',
    ERROR: 'ERROR'
  }
};

export const EVENT_TRIGGERS = {
  MEDIA_AUDIO_CHANGED: 'media:audioChanged',
  MEDIA_VIDEO_CHANGED: 'media:videoChanged',
  MEDIA_READY: 'media:ready',
  MEDIA_STOPPED: 'media:stopped',
  MEDIA_UPDATE: 'media:update',
  STATS_UPDATE: 'stats:update',
  CALENDAR_UPDATE: 'calendar:update',
  CALENDAR_CREATE: 'calendar:create',
  CALENDAR_DELETE: 'calender:delete'
};

export const EVENT_STATS_MAP = {
  BYTES_SENT: 'bytesSent',
  BYTES_RECEIVED: 'bytesReceived'
};

export const EVENT_TYPES = {
  SELF: 'self',
  OTHER: 'other',
  LOCAL: 'local',
  REMOTE: 'remote',
  SHARE: 'share',
  ERROR: 'error'
};

export const MEETING_AUDIO_STATE_MACHINE = {
  TRANSITIONS: {
    TOGGLE: 'toggle',
    INIT: 'init'
  },
  STATES: {
    MUTE_SELF: 'SELF_AUDIO_OFF',
    UNMUTE_SELF: 'SELF_AUDIO_ON'
  }
};

export const MEETING_VIDEO_STATE_MACHINE = {
  TRANSITIONS: {
    TOGGLE: 'toggle',
    INIT: 'init'
  },
  STATES: {
    MUTE_SELF: 'SELF_VIDEO_OFF',
    UNMUTE_SELF: 'SELF_VIDEO_ON'
  }
};

export const SDP = {
  A_CONTENT_SLIDES: 'a=content:slides',
  ROLLBACK: 'rollback',
  HAVE_LOCAL_OFFER: 'have-local-offer',
  STABLE: 'stable',
  OFFER: 'offer',
  M_LINE: 'm=',
  MAX_FS_8160: 'max-fs=8160',
  B_LINE: 'b=TIAS',
  CARRIAGE_RETURN: '\r\n',
  BAD_MEDIA_PORTS: [9, 0]
};

export const ROAP = {
  ROAP_TRANSITIONS: {
    STEP: 'step'
  },
  ROAP_TYPES: {
    OFFER: 'OFFER',
    ANSWER: 'ANSWER',
    OK: 'OK',
    ERROR: 'ERROR',
    SHUTDOWN: 'SHUTDOWN',
    OFFER_REQUEST: 'OFFER_REQUEST'
  },
  ROAP_STATE: {
    INIT: 'INIT',
    WAIT_RX_OFFER: 'WAIT_RX_OFFER',
    WAIT_RX_ANSWER: 'WAIT_RX_ANSWER',
    WAIT_RX_OK: 'WAIT_RX_OK',
    WAIT_TX_OFFER: 'WAIT_TX_OFFER',
    WAIT_TX_ANSWER: 'WAIT_TX_ANSWER',
    WAIT_TX_OK: 'WAIT_TX_OK',
    IDLE_LOCAL_OFFER: 'IDLE_LOCAL_OFFER',
    IDLE_REMOTE_OFFER: 'IDLE_REMOTE_OFFER',
    GLARE: 'GLARE',
    ERROR: 'ERROR'
  },
  ROAP_SIGNAL: {
    RX_OFFER: 'RX_OFFER',
    TX_OFFER: 'TX_OFFER',
    RX_ANSWER: 'RX_ANSWER',
    TX_ANSWER: 'TX_ANSWER',
    RX_OK: 'RX_OK',
    TX_OK: 'TX_OK',
    GLARE_RESOLVED: 'GLARE_RESOLVED'
  },
  RECEIVE_ROAP_MSG: 'RECEIVE_ROAP_MSG',
  SEND_ROAP_MSG: 'SEND_ROAP_MSG',
  SEND_ROAP_MSG_SUCCESS: 'SEND_ROAP_MSG_SUCCESS',
  RESET_ROAP_STATE: 'RESET_ROAP_STATE',
  RECEIVE_CALL_LEAVE: 'RECEIVE_CALL_LEAVE',
  ROAP_MERCURY: 'event:locus.message.roap',
  ROAP_VERSION: '2',
  RX_: 'RX_',
  TX_: 'TX_'
};

export const EVENTS = {
  ROAP_OK: 'ROAP_OK',
  ROAP_ANSWER: 'ROAP_ANSWER'
};

// TODO: move to config?
export const DEFAULT_GET_STATS_FILTER = {
  types: ['track', 'transport', 'candidate-pair', 'outbound-rtp', 'outboundrtp', 'inbound-rtp', 'inboundrtp']
};
export const DEFAULT_EVENT_VIDEO_SEND_KEYS = ['rtpOutVideo', 'rtcOutVideo', 'rtcTransVideo'];
export const DEFAULT_EVENT_AUDIO_SEND_KEYS = ['rtpOutAudio', 'rtcOutAudio', 'rtcTransAudio'];
export const DEFAULT_EVENT_VIDEO_RECEIVE_KEYS = ['rtpInVideo', 'rtcInVideo', 'rtcTransVideo'];
export const DEFAULT_EVENT_AUDIO_RECEIVE_KEYS = ['rtpInAudio', 'rtcInAudio', 'rtcTransAudio'];
export const DEFAULT_TRANSFORM_KEYS = [
  'rtpOutVideo',
  'rtpOutAudio',
  'rtpInVideo',
  'rtpInAudio',
  'rtcOutAudio',
  'rtcOutVideo',
  'rtcInAudio',
  'rtcInVideo',
  'rtcTransAudio',
  'rtcTransVideo',
  'rtcCandidatePairAudio',
  'rtcCandidatePairVideo'
];
export const DEFAULT_TRANSFORM_REGEX = {
  rtpOutVideo: {
    regex: new RegExp('^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?[Vv]ideo')
  },
  rtpOutAudio: {
    regex: new RegExp('^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?[Aa]udio')
  },
  rtpInVideo: {
    regex: new RegExp('^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?[Vv]ideo')
  },
  rtpInAudio: {
    regex: new RegExp('^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?[Aa]udio')
  },
  rtcOutAudio: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:local|sender)_'),
    profiler: {
      type: 'kind',
      value: 'audio'
    }
  },
  rtcOutVideo: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:local|sender)_'),
    profiler: {
      type: 'kind',
      value: 'video'
    }
  },
  rtcInAudio: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:remote|receiver)_'),
    profiler: {
      type: 'kind',
      value: 'audio'
    }
  },
  rtcInVideo: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:remote|receiver)_'),
    profiler: {
      type: 'kind',
      value: 'video'
    }
  },
  rtcTransAudio: {
    regex: new RegExp('^RTCTransport_[Aa]udio')
  },
  rtcTransVideo: {
    regex: new RegExp('^RTCTransport_[Vv]ideo')
  },
  rtcCandidatePairAudio: {
    regex: new RegExp('^RTCIceCandidatePair_'),
    decider: 'nominated',
    selector: true,
    profiler: {
      type: 'transportId',
      value: 'audio'
    }
  },
  rtcCandidatePairVideo: {
    regex: new RegExp('^RTCIceCandidatePair_'),
    decider: 'nominated',
    selector: true,
    profiler: {
      type: 'transportId',
      value: 'video'
    }
  }
};
export const DEFAULT_STATS_INTERVAL = 1000;
export const DEFAULT_STATS_HISTORY_MAX = 1800;
export const DEFAULT_EXCLUDED_STATS = ['timestamp', 'ssrc', 'priority'];
